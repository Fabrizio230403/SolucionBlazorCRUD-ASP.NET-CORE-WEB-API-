@page "/proyecto"
@page "/proyecto/{idProyectoEditar:int}"

@using BlazorCrud.Shared;
@using BlazorCrud.Client.Services;
@using CurrieTechnologies.Razor.SweetAlert2

@inject SweetAlertService Swal;
@inject IProyectoService proyectoService;
@inject NavigationManager navegacion;

<h3>@titulo</h3>

<EditForm Model="proyecto" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText class="form-control" @bind-Value="proyecto.Nombre"></InputText>
        <ValidationMessage For="@(() => proyecto.Nombre)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Descripción</label>
        <InputText class="form-control" @bind-Value="proyecto.Descripcion"></InputText>
        <ValidationMessage For="@(() => proyecto.Descripcion)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Fecha de Inicio</label>
        <InputDate class="form-control" @bind-Value="proyecto.FechaInicio"></InputDate>
        <ValidationMessage For="@(() => proyecto.FechaInicio)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Fecha de Actualización</label>
        <InputDate class="form-control" @bind-Value="proyecto.FechaFin"></InputDate>
        <ValidationMessage For="@(() => proyecto.FechaFin)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Prioridad</label>
        <InputSelect class="form-control" @bind-Value="proyecto.Prioridad">
            <option value="">Seleccionar</option>
            <option value="A">Alta</option>
            <option value="M">Media</option>
            <option value="B">Baja</option>
        </InputSelect>
        <ValidationMessage For="@(() => proyecto.Prioridad)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Estado</label>
        <InputSelect class="form-control" @bind-Value="proyecto.Estado">
            <option value="">Seleccionar</option>
            <option value="C">Completado</option>
            <option value="X">Cancelado</option>
            <option value="E">En Progreso</option>
            <option value="P">Planeado</option>
        </InputSelect>
        <ValidationMessage For="@(() => proyecto.Estado)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Presupuesto Estimado</label>
        <InputNumber class="form-control" @bind-Value="proyecto.PresupuestoEstimado"></InputNumber>
        <ValidationMessage For="@(() => proyecto.PresupuestoEstimado)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Recursos Asignados</label>
        <InputText class="form-control" @bind-Value="proyecto.RecursosAsignados"></InputText>
        <ValidationMessage For="@(() => proyecto.RecursosAsignados)"></ValidationMessage>
    </div>
     
    <div class="mb-3">
        <label class="form-label">Fecha de Creación</label>
        <InputDate class="form-control" @bind-Value="proyecto.FechaCreacion" disabled="true"></InputDate>
        <ValidationMessage For="@(() => proyecto.FechaCreacion)"></ValidationMessage>
    </div>

     
    <div class="mb-3">
        <label class="form-label">Fecha de Actualización</label>
        <InputDate class="form-control" @bind-Value="proyecto.FechaActualizacion" disabled="true"></InputDate>
        <ValidationMessage For="@(() => proyecto.FechaActualizacion)"></ValidationMessage>
    </div>

    <button class="btn btn-primary" type="submit">
        @btnTexto
    </button>

    <a class="btn btn-warning" href="proyectos">Volver</a>
</EditForm>


@code {
    [Parameter]
    public int idProyectoEditar { get; set; } = 0;


    string titulo = string.Empty;
    string btnTexto = string.Empty;

    ProyectoDTO proyecto = new ProyectoDTO();

    protected override async Task OnInitializedAsync()
    {
        if (idProyectoEditar != 0)
        {
            proyecto = await proyectoService.Buscar(idProyectoEditar);
            btnTexto = "Actualizar Proyecto";
            titulo = "Editar Empleado";
        }
        else
        {
            proyecto.FechaCreacion = DateTime.Now; 
            proyecto.FechaActualizacion = null;  
            btnTexto = "Guardar Proyecto";
            titulo = "Nuevo Empleado";
        }
    }

    private async Task OnValidSubmit()
    {
        if (!EsPrioridadValida(proyecto.Prioridad))
        {
            await Swal.FireAsync("Error", "La prioridad debe ser A (Alta), M (Media) o B (Baja).", SweetAlertIcon.Error);
            return;
        }

        if (!EsEstadoValido(proyecto.Estado))
        {
            await Swal.FireAsync("Error", "El estado debe ser C (Completado), X (Cancelado), E (En Progreso) o P (Planeado).", SweetAlertIcon.Error);
            return;
        }

        int idDevuelto = 0;
        if (idProyectoEditar == 0)
            idDevuelto = await proyectoService.Guardar(proyecto);
        else
            idDevuelto = await proyectoService.Editar(proyecto);

        if (idDevuelto != 0)
            navegacion.NavigateTo("/proyectos");
    }

    private bool EsPrioridadValida(string? prioridad)
    {
        return prioridad == "A" || prioridad == "M" || prioridad == "B";
    }

    private bool EsEstadoValido(string? estado)
    {
        return estado == "C" || estado == "X" || estado == "E" || estado == "P";
    }

}
