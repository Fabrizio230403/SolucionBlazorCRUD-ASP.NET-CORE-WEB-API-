@page "/tareas"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador,Gerente de Proyecto,Consultor")]

@using BlazorCrud.Shared;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorCrud.Client.Services;
@using BlazorCrud.Client.Extensiones;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@inject IJSRuntime JSRuntime

@inject HttpClient httpClient
@inject SweetAlertService Swal;
@inject AuthenticationStateProvider autenticacionProvider
@inject ITareaService tareaService;
@inject NavigationManager navManager
@inject IRolPermisoService RolPermisoService;


<h3>Tareas</h3>

 

 
<div class="d-flex justify-content-start mb-3">
    @if (permisos_usuario != null && permisos_usuario.Contains("Crear Tarea"))
    {
        <a class="btn btn-success btn-sm" href="tarea">Nueva Tarea</a>
    }
    else
    {
        <a class="btn btn-success btn-sm disabled">Nueva Tarea</a>
    }

    @if (permisos_usuario != null && permisos_usuario.Contains("Generar Reporte Excel"))
    {
        <button @onclick="DescargarReporteExcel" class="btn btn-success btn-sm ms-3">
            <i class="fas fa-file-excel"></i> Generar Excel
        </button>
    }

    @if (permisos_usuario != null && permisos_usuario.Contains("Generar Reporte PDF"))
    {
        <button @onclick="DescargarReportePDF" class="btn btn-danger btn-sm ms-3">
            <i class="fas fa-file-pdf"></i> Generar PDF
        </button>
    }
</div>

@if (permisos_usuario != null && permisos_usuario.Contains("Leer Tarea"))
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Proyecto</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Fecha Inicio</th>
                <th>Fecha Fin</th>
                <th>Estado</th>
                <th>Usuario</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>

            @if (listaTarea == null)
            {
                <tr>
                    <td colspan="11" align="center">
                        <img style="width:50px" src="https://media.tenor.com/On7kvXhzmI4AAAAj/loading-gif.gif" />
                    </td>
                </tr>
            }
            else
            {
                @foreach (var item in listaTarea)
                {
                    <tr>
                        <td>@item.TareaId</td>
                        <td>@item.Proyecto!.Nombre</td>
                        <td>@item.Nombre</td>
                        <td>@item.Descripcion</td>
                        <td>@item.FechaInicio?.ToString("dd/MM/yyyy")</td>
                        <td>@item.FechaFin?.ToString("dd/MM/yyyy")</td>
                        <td>@ObtenerDescripcionEstado(item.Estado)</td>
                        <td>@item.Usuario!.Nombre</td>
                        <td>
                            @if (permisos_usuario != null && permisos_usuario.Contains("Editar Tarea"))
                            {
                                <a class="btn btn-primary btn-sm" href="tarea/@item.TareaId">Editar</a>
                            }
                            else
                            {
                                <a class="btn btn-primary btn-sm disabled">Editar</a>
                            }

                            <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => Eliminar(item.TareaId))"
                                    disabled="@(permisos_usuario == null || !permisos_usuario.Contains("Eliminar Tarea"))">
                                Eliminar
                            </button>

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

   
}
else
{
    <h1>Usted no tiene permisos para visualizar las tareas</h1>
}



@code {
    List<TareaDTO>? listaTarea = null;
    List<String>? permisos_usuario = null;


    protected override async Task OnInitializedAsync()
    {
        listaTarea = await tareaService.Lista();

        // SESIÓN
        var authState = await autenticacionProvider.GetAuthenticationStateAsync();
        var usuario = authState.User;

        if (usuario.Identity != null && usuario.Identity.IsAuthenticated)
        {
            var usuarioId = int.Parse(usuario.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0");
            permisos_usuario = await RolPermisoService.ListaPermisos(usuarioId);
        }


    }

    private async Task Eliminar(int id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar Tarea",
                Text = "Deseas eliminar la tarea?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (resultado.IsConfirmed)
        {
            var eliminado = await tareaService.Eliminar(id);

            if (eliminado)
                listaTarea = listaTarea!.FindAll(e => e.TareaId != id);
        }
    }

    private string ObtenerDescripcionEstado(string? estado)
    {
        return estado switch
        {
            "P" => "Pendiente",
            "E" => "En Progreso",
            "C" => "Completado",
            _ => "Desconocido"
        };
    }

   

    private async Task DescargarReporteExcel()
    {
        try
        {
            var archivoExcel = await tareaService.GenerarReporteExcel();
            var fileName = "ReporteTareas.xlsx";

            var byteArrayContent = new ByteArrayContent(archivoExcel);
            byteArrayContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(archivoExcel)}";
            navManager.NavigateTo(fileUrl, true);
        }
        catch (Exception ex)
        {
            // Manejo de error
            Console.Error.WriteLine($"Error al generar el reporte Excel: {ex.Message}");
        }
    }

    private async Task DescargarReportePDF()
    {
        try
        {
            // Llamamos al servicio para obtener el archivo PDF
            var archivoPDF = await tareaService.GenerarReportePDF();

            // Establecemos el nombre del archivo
            var fileName = "ReporteTareas.pdf";

            // Creamos la URL base64 para la descarga del archivo
            var fileUrl = $"data:application/pdf;base64,{Convert.ToBase64String(archivoPDF)}";

            // Llamamos al método JavaScript para iniciar la descarga
            await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
        }
        catch (Exception ex)
        {
            // Manejo de errores
            Console.Error.WriteLine($"Error al generar el reporte PDF: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Asegúrate de que el archivo JS esté cargado
            await JSRuntime.InvokeVoidAsync("eval", "console.log('JavaScript cargado correctamente')");
        }
    }
}
 
 