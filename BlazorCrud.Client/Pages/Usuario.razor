@page "/usuario"
@page "/usuario/{idUsuarioEditar:int}"

@using BlazorCrud.Shared;
@using BlazorCrud.Client.Services;
@using CurrieTechnologies.Razor.SweetAlert2

@inject SweetAlertService Swal;
@inject IUsuarioService usuarioService;
@inject IRolService rolService;
@inject NavigationManager navegacion;

<h3>@titulo</h3>

<EditForm Model="usuario" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <label class="form-label">Nombre de Usuario</label>
        <InputText class="form-control" @bind-Value="usuario.Nombre"></InputText>
        <ValidationMessage For="@(() => usuario.Nombre)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Correo Electrónico</label>
        <InputText class="form-control" @bind-Value="usuario.Email"></InputText>
        <ValidationMessage For="@(() => usuario.Email)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Contraseña</label>
        <InputText class="form-control" @bind-Value="usuario.PasswordHash" ></InputText>
        <ValidationMessage For="@(() => usuario.PasswordHash)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Rol de Usuario</label>
        <InputSelect class="form-select" @bind-Value="usuario.RolId">
            <option value="0"> -- Seleccionar -- </option>
            @foreach (var item in listaRol)
            {
                <option value="@item.RolId">@item.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => usuario.RolId)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha de Creación</label>
        <InputDate class="form-control" @bind-Value="usuario.FechaCreacion"></InputDate>
        <ValidationMessage For="@(() => usuario.FechaCreacion)"></ValidationMessage>
    </div>


    <button class="btn btn-primary" type="submit">
        @btnTexto
    </button>

    <a class="btn btn-warning" href="usuarios">Volver</a>
</EditForm>


@code {
    [Parameter]
    public int idUsuarioEditar { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    UsuarioDTO usuario = new UsuarioDTO();
    List<RolDTO> listaRol = new List<RolDTO>();

    protected override async Task OnInitializedAsync()
    {
        if (idUsuarioEditar != 0)
        {
            usuario = await usuarioService.Buscar(idUsuarioEditar);
            btnTexto = "Actualizar Usuario";
            titulo = "Editar Usuario";
        }
        else
        {
            usuario.FechaCreacion = DateTime.Now;
            btnTexto = "Guardar Usuario";
            titulo = "Nuevo Usuario";
        }

        listaRol = await rolService.Lista();
    }


    private async Task OnValidSubmit()
    {
        int idDevuelto = 0;
        if (idUsuarioEditar == 0)
            idDevuelto = await usuarioService.Guardar(usuario);
        else
            idDevuelto = await usuarioService.Editar(usuario);

        if (idDevuelto != 0)
            navegacion.NavigateTo("/usuarios");
    }

}
